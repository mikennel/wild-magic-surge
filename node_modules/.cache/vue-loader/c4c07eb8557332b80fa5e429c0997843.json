{"remainingRequest":"C:\\Users\\micha\\Documents\\Code\\wild-magic-surge\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\micha\\Documents\\Code\\wild-magic-surge\\src\\components\\common\\ProToast.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\micha\\Documents\\Code\\wild-magic-surge\\src\\components\\common\\ProToast.vue","mtime":1603221301044},{"path":"C:\\Users\\micha\\Documents\\Code\\wild-magic-surge\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\micha\\Documents\\Code\\wild-magic-surge\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nexport default {\r\n  name: 'ProToast',\r\n  data () {\r\n    return {\r\n      testIf: false,\r\n      toasts: [],\r\n    }\r\n  },\r\n  methods: {\r\n    readyListener () {\r\n      this.$proOn('toast', (options) => {\r\n        let toast = options\r\n        if (typeof options === 'string') {\r\n          toast = {\r\n            copy: options,\r\n            time: 2000,\r\n          }\r\n        }\r\n        toast.id = String(Math.random())\r\n        this.onToastAdd(toast)\r\n      }) \r\n    },\r\n    onToastAdd (toast) {\r\n      this.toasts.push(toast)\r\n      setTimeout(() => {\r\n        const toastIdx = this.toasts.findIndex(aToast => aToast.id === toast.id)\r\n        this.toasts.splice(toastIdx, 1)\r\n      }, toast.time || 2500)\r\n    },\r\n  },\r\n  mounted () {\r\n    this.readyListener()\r\n  },\r\n}\r\n",{"version":3,"sources":["ProToast.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProToast.vue","sourceRoot":"src/components/common","sourcesContent":["<script>\r\nexport default {\r\n  name: 'ProToast',\r\n  data () {\r\n    return {\r\n      testIf: false,\r\n      toasts: [],\r\n    }\r\n  },\r\n  methods: {\r\n    readyListener () {\r\n      this.$proOn('toast', (options) => {\r\n        let toast = options\r\n        if (typeof options === 'string') {\r\n          toast = {\r\n            copy: options,\r\n            time: 2000,\r\n          }\r\n        }\r\n        toast.id = String(Math.random())\r\n        this.onToastAdd(toast)\r\n      }) \r\n    },\r\n    onToastAdd (toast) {\r\n      this.toasts.push(toast)\r\n      setTimeout(() => {\r\n        const toastIdx = this.toasts.findIndex(aToast => aToast.id === toast.id)\r\n        this.toasts.splice(toastIdx, 1)\r\n      }, toast.time || 2500)\r\n    },\r\n  },\r\n  mounted () {\r\n    this.readyListener()\r\n  },\r\n}\r\n</script>\r\n\r\n<template lang=\"pug\">\r\n  .pro-toast-main\r\n    .pro-toast-container\r\n      transition-group(\r\n        name='from-bottom'\r\n        mode='out-in'\r\n      )\r\n        .toast(\r\n          v-for='toast in toasts'\r\n          :key='toast.id'\r\n        ) {{toast.copy}}\r\n</template>\r\n\r\n<style lang=\"sass\" scoped>\r\n  @import '$styles/transitions.sass'\r\n  @import '$vars'\r\n  .pro-toast-main\r\n    position: fixed\r\n    bottom: 20px\r\n    max-width: 100%\r\n    width: fit-content\r\n    min-width: 110px\r\n    left: 50%\r\n    transform: translateX(-50%)\r\n    transition: .25s all\r\n    .pro-toast-container\r\n      position: relative\r\n      display: grid\r\n      align-items: end\r\n      .toast\r\n        background-color: black\r\n        color: $nh-yellow\r\n        margin-top: 15px\r\n        padding: 5px 15px\r\n        font-size: 1.3em\r\n        transition: all .25s\r\n\r\n</style>\r\n\r\n"]}]}