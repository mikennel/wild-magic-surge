{"remainingRequest":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikennel/Documents/Code/wild-magic-surge/src/components/modals/Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/src/components/modals/Main.vue","mtime":1578077374537},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport Alert from './Alert'\nexport default {\n  name: 'ModalsMain',\n  components: {\n    'alert': Alert,\n  },\n  data () {\n    return {\n      modalsOptions: {},\n    }\n  },\n  computed: {\n    seeModals () {\n      return Object.keys(this.modalsOptions).length\n    },\n    componentsList () {\n      return Object.keys(this.$options.components).filter(comp => comp !== 'ModalsMain')\n    },\n  },\n  methods: {\n    shouldIncludeComp (comp) {\n      return Object.keys(this.modalsOptions).includes(comp)\n    },\n    setUpListeners () {\n      this.$proOn('showModal', options => {\n        if (options && this.componentsList.includes(options.name)) {\n          this.modalsOptions[options.name] = options\n          this.$forceUpdate()\n        } else {\n          alert(`Could not find and show the following modal: ${options && options.name}`)\n        }\n      })\n      this.$proOn('hideModal', modalName => {\n        // hides all modals if no modal name is declared\n        if (!modalName) {\n          this.modalsOptions = {}\n        } else {\n          delete this.modalsOptions[modalName]\n        }\n        this.$forceUpdate()\n      })\n    },\n  },\n  mounted () {\n    this.setUpListeners()\n  },\n}\n",{"version":3,"sources":["Main.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Main.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\nimport Alert from './Alert'\nexport default {\n  name: 'ModalsMain',\n  components: {\n    'alert': Alert,\n  },\n  data () {\n    return {\n      modalsOptions: {},\n    }\n  },\n  computed: {\n    seeModals () {\n      return Object.keys(this.modalsOptions).length\n    },\n    componentsList () {\n      return Object.keys(this.$options.components).filter(comp => comp !== 'ModalsMain')\n    },\n  },\n  methods: {\n    shouldIncludeComp (comp) {\n      return Object.keys(this.modalsOptions).includes(comp)\n    },\n    setUpListeners () {\n      this.$proOn('showModal', options => {\n        if (options && this.componentsList.includes(options.name)) {\n          this.modalsOptions[options.name] = options\n          this.$forceUpdate()\n        } else {\n          alert(`Could not find and show the following modal: ${options && options.name}`)\n        }\n      })\n      this.$proOn('hideModal', modalName => {\n        // hides all modals if no modal name is declared\n        if (!modalName) {\n          this.modalsOptions = {}\n        } else {\n          delete this.modalsOptions[modalName]\n        }\n        this.$forceUpdate()\n      })\n    },\n  },\n  mounted () {\n    this.setUpListeners()\n  },\n}\n</script>\n\n<template lang=\"pug\">\n  span\n    transition(\n      name='fade'\n    )\n      .modals-main(\n        v-if='Object.keys(this.modalsOptions).length'\n      )\n        .modals-container(\n          v-for='(comp, idx) in componentsList'\n          v-if='shouldIncludeComp(comp)'\n          @click='$modals.hide(comp)'\n          )\n            span(\n              @click.stop=''\n            )\n              component(\n                :is='comp'\n                :options='modalsOptions[comp]'\n                )\n</template>\n\n<style lang=\"sass\">\n  @import '$styles/transitions.sass'\n  .modals-main\n    height: 100vh\n    width: 100vw\n    position: fixed\n    z-index: 999\n    .modals-container\n      height: 100%\n      width: 100%\n      background-color: transparentize(grey, .5)\n      > span\n        > .modal-main\n          background-color: white\n          position: absolute\n          left: 50%\n          top: 50%\n          transform: translateY(-50%) translateX(-50%)\n          height: auto\n          max-height: 100vh\n          width: 320px\n          border-radius: 10px\n          box-shadow: 0 0 15px 0 grey\n          border: thin grey solid\n          overflow-y: scroll\n          > .modal-container\n            > *\n              padding: 15px\n            > .title\n              font-size: 1.2em\n              color: white\n              background-color: #999\n            > .content\n              .content-title\n                font-size: 1.6em\n              .input-field\n                margin-top: 5px\n                $input-font-size: .9em\n                > input\n                  margin-bottom: 8px\n                  height: 2.6rem\n                label\n                  &.active\n                    transform: translateY(-8px) scale(0.8)\n            > .action\n              background-color: #999\n              color: white\n              display: grid\n              > .button\n                padding: 3px 5px\n                background-color: white\n                border-radius: 5px\n                color: black\n                text-align: center\n                cursor: pointer\n                border: white 2px solid\n                transition: all .25s\n                user-select: none\n                &:hover\n                  box-shadow: 0 0 5px 0 #444\n                &.cancel\n                  background-color: transparent\n                  color: white\n</style>\n"]}]}