{"remainingRequest":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikennel/Documents/Code/wild-magic-surge/src/components/common/ProToast.vue?vue&type=style&index=0&id=6d304344&lang=sass&scoped=true&","dependencies":[{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/src/components/common/ProToast.vue","mtime":1578077374536},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikennel/Documents/Code/wild-magic-surge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '$styles/transitions.sass'\n@import '$vars'\n.pro-toast-main\n  position: fixed\n  bottom: 20px\n  max-width: 100%\n  width: fit-content\n  min-width: 110px\n  left: 50%\n  transform: translateX(-50%)\n  transition: .25s all\n  .pro-toast-container\n    position: relative\n    display: grid\n    align-items: end\n    .toast\n      background-color: black\n      color: $nh-yellow\n      margin-top: 15px\n      padding: 5px 15px\n      font-size: 1.3em\n      transition: all .25s\n\n",{"version":3,"sources":["ProToast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProToast.vue","sourceRoot":"src/components/common","sourcesContent":["<script>\nexport default {\n  name: 'ProToast',\n  data () {\n    return {\n      testIf: false,\n      toasts: [],\n    }\n  },\n  methods: {\n    readyListener () {\n      this.$proOn('toast', (options) => {\n        let toast = options\n        if (typeof options === 'string') {\n          toast = {\n            copy: options,\n            time: 2000,\n          }\n        }\n        toast.id = String(Math.random())\n        this.onToastAdd(toast)\n      }) \n    },\n    onToastAdd (toast) {\n      this.toasts.push(toast)\n      setTimeout(() => {\n        const toastIdx = this.toasts.findIndex(aToast => aToast.id === toast.id)\n        this.toasts.splice(toastIdx, 1)\n      }, toast.time || 2500)\n    },\n  },\n  mounted () {\n    this.readyListener()\n  },\n}\n</script>\n\n<template lang=\"pug\">\n  .pro-toast-main\n    .pro-toast-container\n      transition-group(\n        name='from-bottom'\n        mode='out-in'\n      )\n        .toast(\n          v-for='toast in toasts'\n          :key='toast.id'\n        ) {{toast.copy}}\n</template>\n\n<style lang=\"sass\" scoped>\n  @import '$styles/transitions.sass'\n  @import '$vars'\n  .pro-toast-main\n    position: fixed\n    bottom: 20px\n    max-width: 100%\n    width: fit-content\n    min-width: 110px\n    left: 50%\n    transform: translateX(-50%)\n    transition: .25s all\n    .pro-toast-container\n      position: relative\n      display: grid\n      align-items: end\n      .toast\n        background-color: black\n        color: $nh-yellow\n        margin-top: 15px\n        padding: 5px 15px\n        font-size: 1.3em\n        transition: all .25s\n\n</style>\n\n"]}]}